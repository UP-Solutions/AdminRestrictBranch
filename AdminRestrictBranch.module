<?php

/**
 * Processwire module to restrict site editors to a single branch of the tree.
 * by Adrian Jones
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class AdminRestrictBranch extends WireData implements Module, ConfigurableModule {

	/**
	 * Basic information about module
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Admin Restrict Branch',
			'summary' => 'Restrict site editors to a single branch of the tree.',
			'href' => 'https://processwire.com/talk/topic/11499-admin-restrict-branch/',
			'version' => 10,
			'autoload' => true,
			'singular' => true,
            'icon' => 'key'
		);
	}


    /**
     * Data as used by the get/set functions
     *
     */
    protected $data = array();


   /**
     * Default configuration for module
     *
     */
    static public function getDefaultData() {
            return array(
                "matchType" => null,
                "phpCode" => '',
                "branchExclusions" => null,
                "restrictType" => 'editing_and_view'
            );
    }


    /**
     * Populate the default config data
     *
     */
    public function __construct() {
       foreach(self::getDefaultData() as $key => $value) {
               $this->$key = $value;
       }
    }


	/**
	 * Initialize the module and setup hooks
	 */
	public function init() {
        // modify $page->editable() based on branch restrictions - works in admin and front-end (for FREDI, FEEL, etc)
        $this->addHookAfter('Page::editable', $this, 'hookPageEditable');
	}

    public function ready() {
        //early exit if match type not set yet or superuser
        if($this->data['matchType'] == 'disabled' || $this->data['matchType'] == '' || $this->user->isSuperuser()) return;

        //only set up page list restriction hook if in admin and restrict type allows it
        if($this->page->template == 'admin' && $this->data['restrictType'] == 'editing_and_view') {
            if(!isset($_GET['id'])) {
                $this->addHookBefore('ProcessPageList::execute', $this, 'setBranchRoot', array('priority'=>2));
            }
            else {
                $this->addHookBefore('ProcessPageList::execute', $this, 'resetId', array('priority'=>1));
            }
        }
    }

    //in case the user tries to manually pass an id in the url to access another branch
    public function resetId() {
        if(isset($_GET['id']) && !$this->onMyBranch($this->pages->get($_GET['id']))) {
            //get the restricted branch root
            $p = $this->getBranchRoot();
            $_GET['id'] = $p->id;
        }
    }


    //set pagelist root to the parent whose name matches the role of the user,
    //eg 'branch-one' role will set the tree to only show the branch with parent->name = 'branch-one'
    public function setBranchRoot() {

        //get the restricted branch root
        $p = $this->getBranchRoot();

        //set parent page of branch
        $_GET['id'] = $p->id;

        //if open get variable is set and it matched the defined parent,
        //then need this to prevent doubling of page branch
        if(isset($_GET['open']) && $_GET['open'] == $p->id) wire('input')->get->open = null;
    }


    public function getBranchRoot() {

        if($this->data['matchType'] == 'role_name') {
            foreach(wire('user')->roles as $role){
                $p = wire('pages')->get("has_parent!=admin, name={$role->name}, include=all");
                if($p->id) break;
            }
        }
        elseif($this->data['matchType'] == 'custom_php_code') {
            $user = $this->user;
            $p = wire('pages')->get("has_parent!=admin, name=".eval($this->data['phpCode']).", include=all");
        }
        else {
            //option to match branch parent defined in user profile
            $p = $this->user->branch_parent;
        }

        return $p;
    }


    /**
     * Check if this page, or any ancestor pages, are editable
     *
     * From Netcarver
     *
     */
    public function onMyBranch($page) {
        $page_on_my_branch = $this->branchCheck($page);
        if(!$page_on_my_branch) {
            $parents = $page->parents();
            while(!$page_on_my_branch && count($parents)) {
                $p = $parents->pop();
                $page_on_my_branch = $this->branchCheck($p);
            }
        }
        return $page_on_my_branch;
    }

    public function branchCheck($page) {
        if(in_array($page->id, $this->data['branchExclusions'])) {
            return true;
        }
        elseif($this->data['matchType'] == 'role_name') {
            return $this->user->hasRole($page->name);
        }
        else {
            return $page == $this->user->branch_parent ? true : false;
        }
    }

    /**
     * Page::editable hook
     *
     */
    public function hookPageEditable($event) {
        //early exit if match type not set yet or superuser
        //checked here because you can't check superuser in init()
        if($this->data['matchType'] == 'disabled' || $this->data['matchType'] == '' || $this->user->isSuperuser()) return;

        if($this->user->hasPermission('page-edit')) {
            $event->return = $this->onMyBranch($event->object);
        } else {
            $event->return = false;
        }
    }



    /**
     * Return an InputfieldsWrapper of Inputfields used to configure the class
     *
     * @param array $data Array of config values indexed by field name
     * @return InputfieldsWrapper
     *
     */
    public static function getModuleConfigInputfields(array $data) {

        $data = array_merge(self::getDefaultData(), $data);

        $wrapper = new InputFieldWrapper();

        $f = wire('modules')->get("InputfieldRadios");
        $f->attr('name', 'matchType');
        $f->label = __('How to match user to branch');
        $f->description = __("&bull; 'Role Name' limits users to the branch whose parent page name matches the name of one of their roles (eg. 'branch-one' role will be restricted to the 'Branch One' branch.\n&bull; 'Specified Parent' is specifically set on each user's profile page using the 'Branch parent to restrict access to' field.");
        $f->required = true;
        $f->addOption('disabled', 'Disabled');
        $f->addOption('role_name', 'Role Name');
        $f->addOption('specified_parent', 'Specified Branch Parent');
        $f->addOption('custom_php_code', 'Custom PHP code');
        $f->value = $data['matchType'];
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldText");
        $f->attr('name', 'phpCode');
        $f->label = __('Custom PHP code');
        $f->description = __('Has access to $user variable.');
        $f->notes = __('eg. return strtolower($user->first_name . "-" . $user->last_name);'."\nThis example allows automatic restriction of a user to a branch named to match their first and last names.");
        $f->required = true;
        $f->showIf="matchType='custom_php_code'";
        $f->requiredIf="matchType='custom_php_code'";
        $f->value = $data['phpCode'];
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldRadios");
        $f->attr('name', 'restrictType');
        $f->label = __('Restrict editing and list viewing, or just editing.');
        $f->description = __("With 'Editing Only' selected, users will still see all branches in the page tree, but their editing access will still be restricted.");
        $f->required = true;
        $f->addOption('editing_and_view', 'Editing and List Viewing');
        $f->addOption('editing_only', 'Editing Only');
        $f->value = $data['restrictType'];
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldPageListSelectMultiple");
        $f->attr('name', 'branchExclusions');
        $f->label = __('Branch edit exclusions');
        $f->description = __("Selected branches will be excluded from branch edit restrictions. They still won't show in the page list, but they will remain editable, which is useful for external PageTable branches etc.");
        $f->value = $data['branchExclusions'];
        $wrapper->add($f);

        return $wrapper;
    }


    public function ___install() {

        //Create branch_parent field on user template
        if(!$this->fields->branch_parent) {
            $f = new Field();
            $f->type = "FieldtypePage";
            $f->derefAsPage = 2;
            $f->inputfield = "InputfieldPageListSelect";
            $f->name = "branch_parent";
            $f->label = "Branch parent to restrict access to";
            $f->description = "This is used by the Admin Restrict Branch module to limit this user to only see the branch starting with this parent when viewing the page list in the admin. It also restricts editing access to just this branch.";
            $f->notes = __("This only works if this Admin Restrict Branch module config option is set to 'Specified Branch Parent'.");
            $f->collapsed = Inputfield::collapsedBlank;
            $f->save();

            $user_template = $this->templates->get("user");
            $user_template->fields->add($f);
            $user_template->fields->save();

        }

    }


    public function ___uninstall() {

        //remove branch_parent field
        if($this->fields->branch_parent) {

            $f = $this->fields->branch_parent;

            $user_template = $this->templates->get("user");
            $user_template->fields->remove($f);
            $user_template->fields->save();

            $this->fields->delete($f);

        }

    }


}
